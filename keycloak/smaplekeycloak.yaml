apiVersion: v1
kind: Pod
metadata:
  name: keycloak-7b647f74-5x4w9
  generateName: keycloak-7b647f74-
  namespace: default
  uid: 0b1efe16-e6e0-4ceb-a790-fc44c8fc8a64
  resourceVersion: '49720'
  creationTimestamp: '2022-08-11T10:08:13Z'
  labels:
    app: keycloak
    pod-template-hash: 7b647f74
  ownerReferences:
    - apiVersion: apps/v1
      kind: ReplicaSet
      name: keycloak-7b647f74
      uid: d2bfb6ab-0a1a-4cbc-afd6-2416c1fcfb82
      controller: true
      blockOwnerDeletion: true
  managedFields:
    - manager: kube-controller-manager
      operation: Update
      apiVersion: v1
      time: '2022-08-11T10:08:13Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"d2bfb6ab-0a1a-4cbc-afd6-2416c1fcfb82"}: {}
        f:spec:
          f:containers:
            k:{"name":"keycloak"}:
              .: {}
              f:args: {}
              f:env:
                .: {}
                k:{"name":"KC_PROXY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KEYCLOAK_ADMIN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KEYCLOAK_ADMIN_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
    - manager: Go-http-client
      operation: Update
      apiVersion: v1
      time: '2022-08-11T10:08:43Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"172.17.0.6"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      subresource: status
  selfLink: /api/v1/namespaces/default/pods/keycloak-7b647f74-5x4w9
status:
  phase: Running
  conditions:
    - type: Initialized
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2022-08-11T10:08:13Z'
    - type: Ready
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2022-08-11T10:08:43Z'
    - type: ContainersReady
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2022-08-11T10:08:43Z'
    - type: PodScheduled
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2022-08-11T10:08:13Z'
  hostIP: 192.168.49.2
  podIP: 172.17.0.6
  podIPs:
    - ip: 172.17.0.6
  startTime: '2022-08-11T10:08:13Z'
  containerStatuses:
    - name: keycloak
      state:
        running:
          startedAt: '2022-08-11T10:08:24Z'
      lastState: {}
      ready: true
      restartCount: 0
      image: quay.io/keycloak/keycloak:19.0.1
      imageID: >-
        docker-pullable://quay.io/keycloak/keycloak@sha256:b8dd5185ed3856488d127fe419a2593c675f1dc6c7e1e0977234f3b0cc13598f
      containerID: >-
        docker://8fb2bc4e9032451bfa0bd413c979c2f05e5836a3b3e3cda05ce8d22e3bb97c08
      started: true
  qosClass: BestEffort
spec:
  volumes:
    - name: kube-api-access-ljr8x
      projected:
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              name: kube-root-ca.crt
              items:
                - key: ca.crt
                  path: ca.crt
          - downwardAPI:
              items:
                - path: namespace
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
        defaultMode: 420
  containers:
    - name: keycloak
      image: quay.io/keycloak/keycloak:19.0.1
      args:
        - start-dev
      ports:
        - name: http
          containerPort: 8080
          protocol: TCP
      env:
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: admin
        - name: KC_PROXY
          value: edge
      resources: {}
      volumeMounts:
        - name: kube-api-access-ljr8x
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      readinessProbe:
        httpGet:
          path: /realms/master
          port: 8080
          scheme: HTTP
        timeoutSeconds: 1
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  nodeName: minikube
  securityContext: {}
  schedulerName: default-scheduler
  tolerations:
    - key: node.kubernetes.io/not-ready
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
    - key: node.kubernetes.io/unreachable
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
  priority: 0
  enableServiceLinks: true
  preemptionPolicy: PreemptLowerPriority
