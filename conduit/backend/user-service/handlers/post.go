package handlers

import (
	"backend/internal"
	"backend/internal/authentication/handlers"
	"backend/user-service/models"
	"fmt"
	"net/http"
)

const ACCEPTING_NEW_USERS = true

var ErrUserServicePostBase = fmt.Errorf("%v [POST] ", ErrUserServiceBaseError)
var WarnUserServicePostBase = fmt.Errorf("%v [POST] ", WarnUserServiceBaseWarning)

var WarnUserServicePostNotAcceptingNewUser = fmt.Errorf("%v: Application is not accpecting new users at this time", WarnUserServicePostBase)

//func (uh *UserHandler) CreateNewUserViaJSON(rw http.ResponseWriter, r *http.Request) {
//	rw.Header().Add("Content-Type", "application/json")
//
//	if !ACCEPTING_NEW_USERS {
//		http.Error(rw, WarnUserServicePostNotAcceptingNewUser.Error(), http.StatusForbidden)
//		uh.StandardHandler.ServiceLogger.Println(WarnUserServicePostNotAcceptingNewUser)
//		return
//	}
//	//Grabs the UserAuthenticationProfiles form the incoming JSON
//	passedUser := r.Context().Value(UserHandlerKey{}).(*models.UserExternalAuthProfiles)
//	uh.StandardHandler.ServiceLogger.Println("[DEBUG] Attempting to insert new UserAuthenticationProfile")
//	err := models.(*passedUser)
//	if err != nil {
//		uh.StandardHandler.ServiceLogger.Println(ErrUserServicePostBase, err)
//		rw.WriteHeader(http.StatusInternalServerError)
//		err := internal.ToJSON(&GenericError{Message: err.Error()}, rw)
//		if err != nil {
//			// if encode to JSON fails just logged from the JSON side
//			return
//		}
//
//	}
//
//}

// CreateNewUserViaHeader creates a new New User Profile and New UserExternalAuthProfile from the header information
// !TODO This needs to be created into a saga due to creating of two objects and if the second one fails roll backs are
// will be needed
func (uh *UserHandler) CreateNewUserViaHeader(rw http.ResponseWriter, r *http.Request) {
	rw.Header().Add("Content-Type", "application/json")

	if !ACCEPTING_NEW_USERS {
		http.Error(rw, WarnUserServicePostNotAcceptingNewUser.Error(), http.StatusForbidden)
		uh.StandardHandler.ServiceLogger.Println(WarnUserServicePostNotAcceptingNewUser)
		return
	}
	sub, err := handlers.AuthGetExternalIDFromContext(r.Context())
	if err != nil {
		http.Error(rw, err.Error(), http.StatusInternalServerError)
		return
	}
	uh.StandardHandler.ServiceLogger.Printf("sub from of current logged in UserAuthenticationProfile %v", sub)

	iss, err := handlers.AuthGetJWTIssuer(r.Context())
	if err != nil {
		http.Error(rw, err.Error(), http.StatusInternalServerError)
		return
	}
	uh.StandardHandler.ServiceLogger.Printf("iss from of current logged in UserAuthenticationProfile %v", iss)

	authParty, err := handlers.AuthGetJWTAuthorizationParty(r.Context())
	if err != nil {
		http.Error(rw, err.Error(), http.StatusInternalServerError)
		return
	}
	uh.StandardHandler.ServiceLogger.Printf("auth_party from of current logged in UserAuthenticationProfile %v", authParty)
	upn, err := handlers.AuthGetUserPrincipalName(r.Context())
	if err != nil {
		http.Error(rw, err.Error(), http.StatusInternalServerError)
		return
	}
	uh.StandardHandler.ServiceLogger.Printf("upn from of current logged in UserAuthenticationProfile %v", upn)

	// Creates the UserProfile first
	newUserProfile := models.UserProfile{
		ExternalAuthID: sub,
		//UserID to be generated by the database.
		DisplayName: upn,
		UserType:    "default",
		DBStatus:    "PENDING",
	}
	err = models.AddNewUserProfile(newUserProfile)
	if err != nil {
		uh.StandardHandler.ServiceLogger.Println(ErrUserServicePostBase, err)
		rw.WriteHeader(http.StatusInternalServerError)
		err := internal.ToJSON(&GenericError{Message: err.Error()}, rw)
		if err != nil {
			// There was an error converting the error to json
			uh.StandardHandler.ServiceLogger.Println(ErrUserServicePostBase, err)
			return
		}
	}
	// Creates A new UserExternalAuthProfile
	newUserExternalProfile := models.UserExternalAuthProfile{
		ExternalAuthID:     sub,
		ExternalAuthIssuer: iss,
		ExternalAuthParty:  authParty,
		ExternalUserName:   upn,
		DBStatus:           "PENDING",
	}

	err = models.AddNewUserExternalAuthProfile(newUserExternalProfile)
	if err != nil {
		uh.StandardHandler.ServiceLogger.Println(ErrUserServicePostBase, err)
		rw.WriteHeader(http.StatusInternalServerError)
		err = internal.ToJSON(&GenericError{Message: err.Error()}, rw)
		if err != nil {
			// There was an error converting the error to json
			uh.StandardHandler.ServiceLogger.Println(ErrUserServicePostBase, err)
			return
		}
		//!TODO Need to HARD Delete the previous UserProfile cause if this failed I don't want to have the soft delete holding that external Profile ID
	}

	//Everything Worked as expected.
	rw.WriteHeader(http.StatusOK)

}
